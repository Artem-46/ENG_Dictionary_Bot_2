from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.storage import FSMContext
from aiogram import types

import random
import json
import asyncio


async def on_startup(_):
    print('–ë–æ—Ç –≤—ã—à–µ–ª –≤ –æ–Ω–ª–∞–π–Ω')

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ —Å–ª–æ–≤–∞–º–∏ –∏ –∏—Ö –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ –∏–∑ —Ñ–∞–π–ª–∞ dic.json
with open('dic.json', 'r', encoding='utf-8') as file:
    data = json.load(file)

with open('read.json', 'r', encoding='utf-8') as file:
    read_dic = json.load(file)

read_key = list(read_dic.keys())
read_value = list(read_dic.values())

correct_answers = 0
wrong_answers = 0
error = 0

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
# @dictionary_46Bot
bot = Bot('6368563334:AAFOKxjgPVBe7JVIsfXTQa705txgSLSz97s')
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è (states)


class MyStates:
    QUESTION = 'question'
    QUESTION_RUS = 'question_rus'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º


async def send_question(message: types.Message):
    key, value = random.choice(list(data.items()))
    await message.answer(f'{key}  --->\n–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:',  parse_mode='html')
    await dp.current_state(user=message.from_user.id).set_state('question')
    await dp.current_state(user=message.from_user.id).update_data(key=key, value=value)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    markup = types.ReplyKeyboardMarkup(
        resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton('/ENG-RUS',))
    markup.add(types.KeyboardButton('/RUS-ENG'))
    markup.add(types.KeyboardButton('NEW WORD'))
    markup.add(types.KeyboardButton('/show_dict'))
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name} üñêÔ∏è!\n–Ø –±—É–¥—É –∑–∞–¥–∞–≤–∞—Ç—å —Å–ª–æ–≤–∞, –∏ —Ç—ã –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–∏—Å–∞—Ç—å –∏—Ö –ø–µ—Ä–µ–≤–æ–¥.\n–¢—ã –≥–æ—Ç–æ–≤? –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ üé∞.', reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /show_dict


@dp.message_handler(commands=['show_dict'])
async def show_dictionary(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ —Å–ª–æ–≤–∞–º–∏ –∏ –∏—Ö –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    text = '\n'.join([f'{key} --> {value}' for key, value in data.items()])
    await message.answer(f'–í–æ—Ç –≤–µ—Å—å —Å–ª–æ–≤–∞—Ä—å:\n\n{text}')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /RUS-ENG


@dp.message_handler(commands=['RUS-ENG'])
async def play(message: types.Message):
    await message.answer('–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º üí¨.')
    await message.answer('–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ - "stop"')
    await asyncio.sleep(1)
    await send_question(message)
    await dp.current_state(user=message.from_user.id).set_state(MyStates.QUESTION)
    await asyncio.sleep(1)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π


@dp.message_handler(state=MyStates.QUESTION, content_types=types.ContentTypes.TEXT)
async def check_answer(message: types.Message, state: FSMContext):
    global correct_answers, wrong_answers, error
    state_data = await state.get_data()
    key = state_data.get('key')
    value = state_data.get('value')
    if key is None or value is None:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏ –∏–≥—Ä—É —Å–Ω–æ–≤–∞, –Ω–∞–ø–∏—Å–∞–≤ /play.')
        await state.finish()
        return

    user_answer = message.text.strip()

    if user_answer.lower() == value.lower():
        correct_answers += 1
        error = 0
        await message.answer('‚úÖ –í–µ—Ä–Ω–æ!')
        await send_question(message)

    elif user_answer.lower() == 'stop':
        await message.answer('–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!')
        await asyncio.sleep(1)
        await show_results(message)
        await state.finish()
        return

    else:
        if error < 1:
            error += 1
            await message.answer('‚ùå –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.')

        else:
            wrong_answers += 1
            error = 0
            await message.answer(f'{message.from_user.first_name}, –Ω–µ —Ç—É–ø–∏!')
            await message.answer('ü§¶')
            await message.answer(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç : <b>{value.upper()}</b>', parse_mode='html')
            await asyncio.sleep(1)
            await send_question_rus(message)


async def show_results(message: types.Message):
    await message.answer(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_answers}\n–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {wrong_answers}')
    await bot.send_video(message.chat.id, video=open('NdR.mp4', 'rb'), caption='–ö—Ä–∞—Å–∞–≤—á–∏–∫!')


async def send_question_rus(message: types.Message):
    eng_rus_data = {value: key for key, value in data.items()}
    key, value = random.choice(list(eng_rus_data.items()))
    await message.answer(f'{key}  --->\n–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:',  parse_mode='html')
    await dp.current_state(user=message.from_user.id).set_state('question')
    await dp.current_state(user=message.from_user.id).update_data(key=key, value=value)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ENG-RUS


@dp.message_handler(commands=['ENG-RUS'])
async def play(message: types.Message):
    await message.answer('–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º üí¨.')
    await message.answer('–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ - "stop"')
    await asyncio.sleep(1)
    await send_question_rus(message)
    await dp.current_state(user=message.from_user.id).set_state(MyStates.QUESTION_RUS)
    await asyncio.sleep(1)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π


@dp.message_handler(state=MyStates.QUESTION_RUS, content_types=types.ContentTypes.TEXT)
async def check_answer(message: types.Message, state: FSMContext):
    global correct_answers, wrong_answers, error
    state_data = await state.get_data()
    key = state_data.get('key')
    value = state_data.get('value')
    if key is None or value is None:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏ –∏–≥—Ä—É —Å–Ω–æ–≤–∞, –Ω–∞–ø–∏—Å–∞–≤ /play.')
        await state.finish()
        return

    user_answer = message.text.strip()

    if user_answer.lower() == value.lower():
        correct_answers += 1
        error = 0
        await message.answer('‚úÖ –í–µ—Ä–Ω–æ!')
        await send_question_rus(message)

    elif user_answer.lower() == 'stop':
        await message.answer('–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!')
        await asyncio.sleep(1)
        await show_results(message)
        await state.finish()
        return

    else:
        if error < 1:
            error += 1
            await message.answer('‚ùå –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.')

        else:
            wrong_answers += 1
            error = 0
            await message.answer(f'{message.from_user.first_name}, –Ω–µ —Ç—É–ø–∏!')
            await message.answer('ü§¶')
            await message.answer(f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç : <b>{value.upper()}</b>', parse_mode='html')
            await asyncio.sleep(1)
            await send_question_rus(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ /read


@ dp.message_handler(commands=['read'])
async def read_book(message: types.Message):
    markup = types.InlineKeyboardMarkup(row_width=3)
    bt1 = types.InlineKeyboardButton('–ú–æ—è —Å–µ–º—å—è', callback_data='clik_0')
    bt2 = types.InlineKeyboardButton('–®–∫–æ–ª—å–Ω—ã–µ –æ–±–µ–¥—ã', callback_data='clik_1')
    bt3 = types.InlineKeyboardButton('–ñ–∏—Ä–∞—Ñ', callback_data='clik_2')
    markup.row(bt2).row(bt1, bt3)
    await message.answer('–í—ã–±–µ—Ä–∏ —Ä–∞—Å—Å–∫–∞–∑:', reply_markup=markup)
    await asyncio.sleep(1)


@ dp.callback_query_handler(lambda query: query.data == 'clik_0')
async def clik_0_callback(callback_query: types.CallbackQuery):
    markup = types.InlineKeyboardMarkup(row_wight=1)
    markup.add(types.InlineKeyboardButton(
        '–ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥', callback_data='tyt_2'))
    await callback_query.message.answer(read_key[0], reply_markup=markup)


@ dp.callback_query_handler(lambda query: query.data == 'clik_1')
async def clik_1_callback(callback_query: types.CallbackQuery):
    markup = types.InlineKeyboardMarkup(row_wight=1)
    markup.add(types.InlineKeyboardButton(
        '–ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥', callback_data='tyt_2'))
    await callback_query.message.answer(read_key[1], reply_markup=markup)


@ dp.callback_query_handler(lambda query: query.data == 'clik_2')
async def clik_2_callback(callback_query: types.CallbackQuery):
    markup = types.InlineKeyboardMarkup(row_wight=1)
    markup.add(types.InlineKeyboardButton(
        '–ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥', callback_data='tyt_2'))
    await callback_query.message.answer(read_key[2], reply_markup=markup)


@ dp.callback_query_handler(lambda query: query.data == 'tyt_0')
async def tyt_0(callback_query: types.CallbackQuery):
    await callback_query.message.answer(read_value[0])


@ dp.callback_query_handler(lambda query: query.data == 'tyt_1')
async def tyt_1(callback_query: types.CallbackQuery):
    await callback_query.message.answer(read_value[1])


@ dp.callback_query_handler(lambda query: query.data == 'tyt_2')
async def tyt_2(callback_query: types.CallbackQuery):
    await callback_query.message.answer(read_value[2])

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞

if __name__ == '__main__':
    from aiogram import executor

    executor.start_polling(dp, on_startup=on_startup)


# await asyncio.sleep(2)
#       await bot.delete_message(chat_id=sent_message.chat.id, message_id=sent_message.message_id)
